name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - uses: actions/checkout@v4
    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(grep -w "CONFIG_ENV" config.env | head -n 1 | cut -d "=" -f 2)
        CONFIG_LIST=(
            KERNEL_SOURCE
            KERNEL_SOURCE_BRANCH
            KERNEL_CONFIG
            KERNEL_IMAGE_NAME
            ARCH
            ADD_LOCALVERSION_TO_FILENAME
            EXTRA_CMDS
            USE_CUSTOM_CLANG
            CUSTOM_CLANG_SOURCE
            CUSTOM_CLANG_BRANCH
            CUSTOM_CMDS
            CLANG_BRANCH
            CLANG_VERSION
            ENABLE_GCC_ARM64
            ENABLE_GCC_ARM32
            USE_CUSTOM_GCC_64
            CUSTOM_GCC_64_SOURCE
            CUSTOM_GCC_64_BRANCH
            CUSTOM_GCC_64_BIN
            USE_CUSTOM_GCC_32
            CUSTOM_GCC_32_SOURCE
            CUSTOM_GCC_32_BRANCH
            CUSTOM_GCC_32_BIN
            ENABLE_KERNELSU
            KERNELSU_TAG
            ADD_KPROBES_CONFIG
            DISABLE-LTO
            ADD_OVERLAYFS_CONFIG
            DISABLE_CC_WERROR
            APPLY_KSU_PATCH
            USE_CUSTOM_ANYKERNEL3
            CUSTOM_ANYKERNEL3_SOURCE
            CUSTOM_ANYKERNEL3_BRANCH
            ENABLE_CCACHE
            NEED_DTBO
            BUILD_BOOT_IMG
            SOURCE_BOOT_IMAGE
            KSU_EXPECTED_SIZE
            KSU_EXPECTED_HASH
            REMOVE_UNUSED_PACKAGES
        )

        for CONFIG in "${CONFIG_LIST[@]}"; do
            if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            else
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            fi
        done

    - name: Remove unused packages
      if: env.REMOVE_UNUSED_PACKAGES == 'true'
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: false
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: false

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Download mkbootimg tools
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

    - name: Download source boot image
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget -O Image https://dl-pc-zb.pds.quark.cn/g1F8THc8/3658421911/8fa07bf33ccf49269a1ca3dbb88534546886127a/6886127afdb12a2c85c94a98a9ce9fad8d46ffd8?Expires=1753638762&OSSAccessKeyId=LTAI5tJJpWQEfrcKHnd1LqsZ&Signature=PuqoJFlkJdmP7yScx6SAmEmuhNw%3D&x-oss-traffic-limit=503316480&response-content-disposition=attachment%3B%20filename%3DImage%3Bfilename%2A%3Dutf-8%27%27Image&callback-var=eyJ4OmF1IjoiMTc1MzYzODc2MiIsIng6aHNwIjoicXVhcmtfcGVyc29uYWxfZmlsZV9kdCIsIng6dWQiOiIxNi0wLTYtMC02LU4tNC1OLTEtMTYtMC1OLU4tTi1OIiwieDpkdF9zcCI6IjEiLCJ4OnNwIjoiMTAwIiwieDp0b2tlbiI6IjQtOWVjYTBjZTRmMDY4YWI5MWFlMmQ4MGRkOWMyY2U2N2MtOC0xLTQwMC04ZDBjMzhjNzFiOWY0OGM3YmVlM2JkNzA1OGIzMzNlNy00MDAtMC0wLTAtZThlNTJiNjU5MmUyYmU3NmE0M2IwZjdkY2RiNTM2YjkiLCJ4OnR0bCI6IjIxNjAwIn0%3D&abt=8_0_&callback=eyJjYWxsYmFja0JvZHlUeXBlIjoiYXBwbGljYXRpb24vanNvbiIsImNhbGxiYWNrU3RhZ2UiOiJiZWZvcmUtZXhlY3V0ZSIsImNhbGxiYWNrRmFpbHVyZUFjdGlvbiI6Imlnbm9yZSIsImNhbGxiYWNrVXJsIjoiaHR0cHM6Ly9hdXRoLWNkbi51Yy5jbi9vdXRlci9vc3MvY2hlY2twbGF5IiwiY2FsbGJhY2tCb2R5Ijoie1wiaG9zdFwiOiR7aHR0cEhlYWRlci5ob3N0fSxcInNpemVcIjoke3NpemV9LFwicmFuZ2VcIjoke2h0dHBIZWFkZXIucmFuZ2V9LFwicmVmZXJlclwiOiR7aHR0cEhlYWRlci5yZWZlcmVyfSxcImNvb2tpZVwiOiR7aHR0cEhlYWRlci5jb29raWV9LFwibWV0aG9kXCI6JHtodHRwSGVhZGVyLm1ldGhvZH0sXCJ1bHJwXCI6JHtodHRwSGVhZGVyLngtdWxycH0sXCJpcFwiOiR7Y2xpZW50SXB9LFwicG9ydFwiOiR7Y2xpZW50UG9ydH0sXCJvYmplY3RcIjoke29iamVjdH0sXCJzcFwiOiR7eDpzcH0sXCJ1ZFwiOiR7eDp1ZH0sXCJ0b2tlblwiOiR7eDp0b2tlbn0sXCJhdVwiOiR7eDphdX0sXCJ0dGxcIjoke3g6dHRsfSxcImR0X3NwXCI6JHt4OmR0X3NwfSxcImhzcFwiOiR7eDpoc3B9LFwiY2xpZW50X3Rva2VuXCI6JHtxdWVyeVN0cmluZy5jbGllbnRfdG9rZW59fSJ9&ud=16-0-6-0-6-N-4-N-1-16-0-N-N-N-N
        wget -O boot-source.img ${{ env.SOURCE_BOOT_IMAGE }}
        if [ -f boot-source.img ]; then
            echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
            echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
        fi

    - name: Make boot image
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        tools/unpack_bootimg.py --boot_img boot-source.img
        cp Image out/kernel
        tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
        if [ -f boot.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "Boot image is empty"
            exit 1
        fi

    - name: Upload ${{ env.KERNEL_IMAGE_NAME }}
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_IMAGE_NAME }}${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}

    - name: Upload AnyKernel3
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*

    - name: Upload DTBO image
      if: env.CHECK_DTBO_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dtbo-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img

    - name: Upload boot image
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: boot${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/boot.img
